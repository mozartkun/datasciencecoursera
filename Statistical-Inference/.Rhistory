library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggplot2")
install.packages(kernlab)
install.packages("kernlab")
library("kernlab", lib.loc="~/R/win-library/3.2")
a=1
a <- 1
b=2
library("kernlab")
data(spam)
View(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
head(trainSpam)
y=20
x=(y>0.5)
x
url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
data=read.csv("C:/Users/User/Desktop/Getting and Cleaning data/getdata-data-ss06hid.csv")
View(data)
sum(data$VAL)
summary(data$VAL)
nrow(data[VAL==24])
nrow(data[data$VAL==24])
nrow(data[,data$VAL==24])
data[VAL==24]
attach(data)
mean(VAL)
mean(VAL, na.rm=T)
data[VAL==24]
data["VAL"==24]
data[,"VAL"==24]
data=as.data.frame(data)
data["VAL"==24]
data[,"VAL"==24]
subset(data, VAL==24)
nrow(subset(data,VAL==24))
summary(FES)
FES
summary(data$FES)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
library("xlsx", lib.loc="~/R/win-library/3.2")
install.packages("rJava")
library("xlsx", lib.loc="~/R/win-library/3.2")
install.packages("rjava")
install.packages("rJava")
x=c(74136,30329,74136,80203,80120)
y=c(0,NA,0,0,456)
sum(x*y,na.rm=T)
library(XML)
install.packages("XML",dependencies=T)
library(XML)
install.packages("xlsx",dependencies=T)
library(xlsx)
install.packages("rJava",dependencies=T)
library(rJava)
library("rJava", lib.loc="~/R/win-library/3.2")
detach("package:rJava", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
url="C:\Program Files (x86)\Java\jre7"
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
library("rJava", lib.loc="~/R/win-library/3.2")
library("xlsxjars", lib.loc="~/R/win-library/3.2")
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre7')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
detach("package:xlsx", unload=TRUE)
library("xlsx", lib.loc="~/R/win-library/3.2")
library("xlsxjars", lib.loc="~/R/win-library/3.2")
detach("package:xlsxjars", unload=TRUE)
remove.packages("xlsx", lib="~/R/win-library/3.2")
remove.packages("rJava", lib="~/R/win-library/3.2")
remove.packages("xlsxjars", lib="~/R/win-library/3.2")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
install.packages("xlsx",dependencies=T)
library("xlsx", lib.loc="~/R/win-library/3.2")
library(xlsx)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal=T)
library("XML", lib.loc="~/R/win-library/3.2")
doc <- xmlTreeParse(url, useInternal=T)
data=read.csv("C:\\Users\\User\\Desktop\\Getting and Cleaning data\\getdata-data-ss06pid.csv")
data[,mean(pwgtp15),by=SEX]
tapply(data$pwgtp15, data$SEX, mean)
sapply(split(data$pwgtp15,data$SEX),mean)
mean(data[data$SEX==1,]$pwgtp15)
rowMeans(data[data$SEX==1])
rowMeans(data)
rowMeans(data$pwgtp15)
colMeans(data$pwgtp15)
data <- array(1:12, c(2,6))
data
rowMeans(data)
colMeans(data)
library(XML)
url="http://www.w3schools.com/xml/simple.xml"
doc=xmlTreeParse(url,useInternal=T)
str(doc)
summary(doc)
doc
rootNode=xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
library(datasets)
data("iris")
dt = data(iris)
dt
data(iris)
?iris
head(iris)
View(iris)
?iris
dt=iris
str(dt)
lapply(split(dt,dt$Species), function(x) {colMeans(x[,c("Sepal.Length")])})
lapply(split(dt,dt$Species), function(x) {mean(x[,c("Sepal.Length")])})
lapply(split(dt$Sepal.Length, dt$Species), mean)
tapply(dt$Sepal.Length, dt$Species, mean)
library(datasets)
data(mtcars)
head(mtcars)
?mtcars
str(mtcars)
sapply(split(mtcars$mpg,mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
li = sapply(split(mtcars$mpg,mtcars$cyl), mean)
li
li["4"]
li[["4"]
]
diff = abs(li["4"]-li["8"])
print(diff)
debug(ls)
ls
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
li = sapply(split(mtcars$hp,mtcars$cyl), mean)
print(li)
diff = abs(li["4"]-li["8"])
print(diff)
clear()
clear
quit
Q
nosim <- 1000
n <- 10
rn <- rnorm(nosim*n)
mt <- matrix(rn, nosim)
ap <- apply(mt, 1, mean)
class(ap)
sd(ap)
1/sqrt(10)
zo <- sample(0:1, 1000, replace=TRUE)
zo <- sample(1:9, 1000, replace=T)
c<-c(1,2,3,4,5)
3 %in% c
setwd("C:/Users/User/Desktop/Statistical Inference/")
?par
setwd("C:/Users/User/Desktop/Statistical Inference/")
library(knitr)
library(plotrix)
install.packages("plotrix")
library(plotrix)
# set the random seed
set.seed(1230)
# set the experiment values
lambda <- 0.2
n <- 40
# prepare the device for a 2x2 plot
# All plotting is clipped to the device region
par(mfrow = c(2,2), xpd=NA)
# generate the random variables for these n values
for (no_sim in c(10, 100, 1000, 10000)){
# clear the vectors
mean_values <- NULL
mean_sds <- NULL
for (i in 1:no_sim){
# calculate the mean & sd of all the sample means
values <- rexp(n, lambda)
means <- mean(values)
sds <- sd(values)
mean_values  <- c(mean_values, means)
mean_sds <- c(mean_sds, sds)
}
myhist <- hist(mean_values , freq = TRUE, xlim = c(2, 8),
main = paste("Histogram of", no_sim, "simulations"), xlab = "Values")
}
## Results
mean(mean_values)
# no_sim = 10,000 - histogram of probability density
par(mfrow = c(1,1))
myhist <- hist(mean_values , freq = FALSE, xlim = c(2, 8), ylim = c(0, .55),
breaks = 25, main = paste("Probability density function for", no_sim, "simulations"),
xlab = "Values")
# calculate the total mean and standard deviation of the aggregated samples
avg <- mean(mean_values)
s <- sd(mean_values)
# plot the average value from the data set
abline(v = avg , col = "steelblue", lwd = 3, lty = 2)
# plot the expected value of an exponential distribution
abline(v = 5, col = "red", lwd = 3, lty = 9)
# plot the theoretical normal distribution for the data set
x <- seq(min(mean_values ), max(mean_values ), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
?abline
setwd("C:/Users/User/Desktop/Statistical Inference/")
library(knitr)
library(plotrix)
# set the random seed
set.seed(999)
# set the experiment values
lambda <- 0.2 ##Parameter of exponential distribution
n <- 40 ##Number of exponentials for each simulation
N <- 1000 ##Number of simulation
# prepare the device for a 2x2 plot
# All plotting is clipped to the device region
par(mfrow = c(1,1), xpd=NA)
# generate the random variables for these n values
meanValue <- NULL
meanStd <-NULL
for (i in 1:N){
##Calculate mean and std of sample means for each simulation
expo <- rexp(n, lambda)
mean <- mean(expo)
std <- sd(expo)
meanValue <- c(meanValue, mean)
meanStd <- c(meanStd, std)
} ##End for
##Plot histogram of frequency and probability density
expoHistFreq <- hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0.55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
par(mfrow = c(1,2), xpd=NA)
# generate the random variables for these n values
meanValue <- NULL
meanStd <-NULL
for (i in 1:N){
##Calculate mean and std of sample means for each simulation
expo <- rexp(n, lambda)
mean <- mean(expo)
std <- sd(expo)
meanValue <- c(meanValue, mean)
meanStd <- c(meanStd, std)
} ##End for
##Plot histogram of frequency and probability density
expoHistFreq <- hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0,55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
##Sample mean and sample variance
meanSample <- mean(meanValue)
stdSample <- sd(meanValue)
##Theoretical mean and theoretical variance
meanThy <- 1/lambda
stdThy <- 1/lambda
##Plot and compare sample mean with theoretical mean
par(mfrow = c(1,1))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0.55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
par(mfrow = c(1,1))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0,55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
abline(v=meanSample, col="blue", lwd=3, lty=2) ##Plot sample mean
abline(v=meanThy, col="red", lwd=3, lty=9) ##Plot theoretical mean
legend('topright', c(paste("Sample mean", meanSample), paste("Theoretical mean", meanThy), "Normal distrubution curve"),
lty=1, col=c('blue', 'red', "gray"), bty='n', cex=.75)
##Compare sample variance and theoretical variance
stdSample
stdThy
##Q-Q plot of mean values to show normality
##Q-Q plot of mean values to show normality
qqnorm(meanValue, col = "lightskyblue1")
qqline(meanValue)
par(mfrow = c(1,1), xpd=NA)
# generate the random variables for these n values
meanValue <- NULL
meanStd <-NULL
for (i in 1:N){
##Calculate mean and std of sample means for each simulation
expo <- rexp(n, lambda)
mean <- mean(expo)
std <- sd(expo)
meanValue <- c(meanValue, mean)
meanStd <- c(meanStd, std)
} ##End for
##Plot histogram of frequency and probability density
expoHistFreq <- hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0,55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
expoHistFreq <- hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
lines(density(meanValue), col="steelblue")
hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
lines(density(meanValue), col="steelblue")
expoHistFreq <- hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0,0.55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
lines(density(meanValue), col="steelblue")
setwd("C:/Users/User/Desktop/Statistical Inference/")
library(knitr)
library(plotrix)
# set the random seed
set.seed(999)
# set the experiment values
lambda <- 0.2 ##Parameter of exponential distribution
n <- 40 ##Number of exponentials for each simulation
N <- 1000 ##Number of simulation
# prepare the device for a 2x2 plot
# All plotting is clipped to the device region
par(mfrow = c(2,1), xpd=NA)
# generate the random variables for these n values
meanValue <- NULL
meanStd <-NULL
for (i in 1:N){
##Calculate mean and std of sample means for each simulation
expo <- rexp(n, lambda)
mean <- mean(expo)
std <- sd(expo)
meanValue <- c(meanValue, mean)
meanStd <- c(meanStd, std)
} ##End for
##Plot histogram of frequency and probability density
expoHistFreq <- hist(meanValue, freq=TRUE, xlim=c(2,8),
main=paste("Histogram of",N,"simulations", xlab="Values"))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0,0.55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
lines(density(meanValue), col="steelblue") ##Simulated Gaussian probability density curve
##Sample mean and sample variance
meanSample <- mean(meanValue)
stdSample <- sd(meanValue)
##Theoretical mean and theoretical variance
meanThy <- 1/lambda
stdThy <- 1/lambda
##Plot and compare sample mean with theoretical mean
par(mfrow = c(1,1))
expoHistProb <- hist(meanValue, freq=FALSE, xlim=c(2,8), ylim=c(0,0.55), breaks=25,
main=paste("Probability density of",N,"simulations"), xlab="Values")
abline(v=meanSample, col="blue", lwd=3, lty=2) ##Plot sample mean
abline(v=meanThy, col="red", lwd=3, lty=9) ##Plot theoretical mean
##Plot theoretical normal distribution density curve
x <- seq(min(meanValue), max(meanValue))
curve(dnorm(x, mean=meanSample, sd=stdSample),
col="gray", lwd=3, lty=3, add=TRUE)
legend('topright', c(paste("Sample mean", meanSample), paste("Theoretical mean", meanThy), "Normal distrubution curve"),
lty=1, col=c('blue', 'red', "gray"), bty='n', cex=.75)
##Compare sample variance and theoretical variance
stdSample ##stdSample=stdThy/sqrt(n)
stdThy
##Q-Q plot of mean values to show normality
qqnorm(meanValue)
qqline(meanValue)
In this project you will investigate the exponential distribution in R and compare it with the **Central Limit Theorem**. The exponential distribution can be simulated in R with `rexp(n, lambda)` where ***lambda*** is the rate parameter $\lambda$. The mean of exponential distribution is $1/\lambda$ and the standard deviation is also $1/\lambda$. Set $\lambda=0.2$ for all of the simulations. You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
shapiro.test(meanValue)
?par
par(mfrow = c(2,1), xpd=NA, mar=c(10,5,10,5))
setwd("C:/Users/User/Desktop/Statistical Inference/")
setwd("C:/Users/User/Desktop/Statistical Inference/")
library(knitr)
library(datasets)
library(ggplot2)
##Load dataset
data(ToothGrowth)
head(ToothGrowth)
##Preprocess dataset
dose <- ToothGrowth$dose
supp <- ToothGrowth$supp
len <- ToothGrowth$len ##tooth growth for comparison
##Summarize dataset
summary(ToothGrowth)
View(ToothGrowth)
g1 <- ggplot(ToothGrowth, aes(x=dose, y=len, group=factor(supp)))
g1 <- g1 + geom_line(size=1, aes(colour=supp)) + geom_point(size=10, pch=21, fill="salmon", alpha=0.5)
g1
g1 <- ggplot(ToothGrowth, aes(x=dose, y=len, group=factor(supp)))
g1 <- g1 + geom_point(size=10, pch=21, fill="salmon", alpha=0.5)
g1
g2 <- ggplot(ToothGrowth, aes(x=supp, y=len, group=factor(dose)))
g2 <- g2 + geom_point(size=10, pch=21, fill="salmon", alpha=0.5)
g2
?ToothGrowth
par(mfrow = c(1,2))
p1 <- ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))
p1 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ supp)
p2 <- ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))
p2 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ dose)
p1 <- ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))
p1 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ supp)
p2 <- ggplot(ToothGrowth, aes(x = factor(supp), y = len, fill = factor(supp)))
p2 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ dose)
b1 <- ggplot(ToothGrowth, aes(x =dose, y=len, fill=factor(dose)))
b1 <- b1 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ supp)
b1 <- ggplot(ToothGrowth, aes(x =dose, y=len, fill=factor(dose)))
b1 <- b1 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ supp)
b1
b1 <- ggplot(ToothGrowth, aes(x =dose, y=len, fill=factor(dose)))
b1 <- b1 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ supp)
b1
b2 <- ggplot(ToothGrowth, aes(x=supp, y=len, fill=factor(supp)))
b2 <- b2 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ dose)
b2
?ToothGrowth
suppVC <- subset(ToothGrowth, supp=="VC")
suppOJ <- subset(ToothGrowth, supp=="OJ")
View(suppOJ)
setwd("C:/Users/User/Desktop/Statistical Inference/")
library(knitr)
library(datasets)
library(ggplot2)
##Load dataset
##ToothGrowth: The response is the length of odontoblasts (teeth) in each of 10 guinea pigs at each of three dose levels of Vitamin C (0.5, 1, and 2 mg) with each of two delivery methods (orange juice or ascorbic acid).
data(ToothGrowth)
head(ToothGrowth)
head(ToothGrowth, 5)
##Preprocess dataset
dose <- ToothGrowth$dose
supp <- ToothGrowth$supp
len <- ToothGrowth$len ##tooth growth for comparison
##Summarize dataset
##len  numeric Tooth length
##supp factor  Supplement type (VC or OJ)
##dose numeric Dose in milligrams
summary(ToothGrowth)
##Exploratory analysis of dataset
##Relationship between dose and len
table(ToothGrowth)
g1 <- ggplot(ToothGrowth, aes(x=dose, y=len, group=factor(supp)))
g1 <- g1 + geom_point(size=10, pch=21, fill="salmon", alpha=0.5)
g1
##Relationship between supp and len
g2 <- ggplot(ToothGrowth, aes(x=supp, y=len, group=factor(dose)))
g2 <- g2 + geom_point(size=10, pch=21, fill="salmon", alpha=0.5)
g2
##Use box plot to do exploratory analysis
b1 <- ggplot(ToothGrowth, aes(x =dose, y=len, fill=factor(dose)))
b1 <- b1 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ supp)
b1
b2 <- ggplot(ToothGrowth, aes(x=supp, y=len, fill=factor(supp)))
b2 <- b2 + geom_boxplot() + guides(fill=FALSE) + facet_grid(. ~ dose)
b2
##Split the data by dosages (0.5, 1, and 2 mg)
dose1 <- subset(ToothGrowth, dose==0.5)
dose2 <- subset(ToothGrowth, dose==1.0)
dose3 <- subset(ToothGrowth, dose==2.0)
##Split the data by supplement type (Vitamin C and Orange juice)
suppVC <- subset(ToothGrowth, supp=="VC")
suppOJ <- subset(ToothGrowth, supp=="OJ")
##T-test between supplement types (Independent, nonequal variance sample)
##Full sample
test0 <- t.test(len~supp, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
test0$p.value
test0$conf
test0 <- t.test(len~supp, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
test0$p.value
test0$conf[1]
test0$conf[1:2]
test0 <- t.test(len~supp, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
test0$p.value
test0$conf[1:2]
##dose=0.5
test1 <- t.test(len~supp, paired=FALSE, var.equal=FALSE, data=dose1)
test1$p.value
test1$conf[1:2]
##dose=1.0
test2 <- t.test(len~supp, paired=FALSE, var.equal=FALSE, data=dose2)
test2$p.value
test2$conf[1:2]
##dose=2.0
test3 <- t.test(len~supp, paired=FALSE, var.equal=FALSE, data=dose3)
test3$p.value
test3$conf[1:2]
##T-test between dosages (0.5, 1.0 and 2.0 mg)
##Full sample
test4 <- t.test(len~dose, paired=FALSE, var.equal=FALSE, data=ToothGrowth)
test0 <- t.test(len~supp, paired=TRUE, var.equal=TRUE, data=ToothGrowth)
test0$p.value
test0$conf[1:2]
test0
mean(ToothGrowth[which(ToothGrowth$supp=="VC")]$len)
mean(ToothGrowth[which(ToothGrowth$supp=="VC",)]$len)
mean(ToothGrowth[which(ToothGrowth$supp=="VC"),"len"])
mean(ToothGrowth[which(ToothGrowth$supp=="OJ"),"len"])
